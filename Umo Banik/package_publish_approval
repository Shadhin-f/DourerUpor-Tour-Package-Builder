<?php

// Step 1: PackageService (Handles package status updates)
class PackageService {
    public function updatePackageStatus($packageId, $status) {
        // Simulate database update
        echo "Package #$packageId status updated to: $status\n";
    }
}

// Step 2: NotificationService (Sends notifications)
class NotificationService {
    public function sendNotification($userId, $message) {
        // Simulate sending notification
        echo "Notification sent to User #$userId: $message\n";
    }
}

// Step 3: LogService (Logs admin actions)
class LogService {
    public function logAction($adminId, $packageId, $action) {
        // Simulate logging
        echo "Admin #$adminId $action Package #$packageId\n";
    }
}

// Step 4: Facade (Simplifies the approval process)
class PackageApprovalFacade {
    private $packageService;
    private $notificationService;
    private $logService;

    public function __construct() {
        $this->packageService = new PackageService();
        $this->notificationService = new NotificationService();
        $this->logService = new LogService();
    }

    public function approvePackage($adminId, $packageId, $userId) {
        $this->packageService->updatePackageStatus($packageId, 'Approved');
        $this->notificationService->sendNotification($userId, "Your package has been approved!");
        $this->logService->logAction($adminId, $packageId, "approved");
    }

    public function rejectPackage($adminId, $packageId, $userId) {
        $this->packageService->updatePackageStatus($packageId, 'Rejected');
        $this->notificationService->sendNotification($userId, "Your package has been rejected.");
        $this->logService->logAction($adminId, $packageId, "rejected");
    }
}

// Step 5: Simulating Admin Approval Process
$approvalFacade = new PackageApprovalFacade();

// Simulate Admin approving a package
$approvalFacade->approvePackage(101, 202, 303); 

// Simulate Admin rejecting a package
$approvalFacade->rejectPackage(101, 204, 305);

?>
